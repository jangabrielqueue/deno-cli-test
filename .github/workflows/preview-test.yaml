
name: Deploy Deno WS Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]


permissions: # Add top-level permissions
  checks: write
  pull-requests: write
  contents: read

jobs:
  build-and-preview:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Define app configurations with their paths and targets
        app:
          - name: 'First'
            path: './apps/first'
            target: 'first'
          - name: 'Second'
            path: './apps/second'
            target: 'second'
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: CI
        run: deno install 

      - name: Build ${{ matrix.app.name }}
        run: deno task --cwd ${{ matrix.app.path }} build

      - name: Deploy to Firebase Preview Channel
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_GAB_DENO_TEST }}'
          projectId: gab-deno-test 
          target: ${{ matrix.app.target }}
        env:
          FIREBASE_CLI_PREVIEWS: hostingchannels

      - name: Save Preview URL
        run: |
          echo "::set-output name=preview_url::$(firebase hosting:channel:get pr-${{ github.event.number }}-${{ matrix.app.name }} --json | jq -r '.url')"
        id: preview_url

      - name: Save Preview URL to artifact
        run: |
          echo "${{ matrix.app.name }}=${{ steps.preview_url.outputs.preview_url }}" >> preview_urls.txt
        
      - name: Upload Preview URLs
        uses: actions/upload-artifact@v3
        with:
          name: preview-urls
          path: preview_urls.txt

  create-comment:
    needs: build-and-preview
    runs-on: ubuntu-latest
    steps:
      - name: Download Preview URLs
        uses: actions/download-artifact@v3
        with:
          name: preview-urls

      - name: Create Comment
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const urls = fs.readFileSync('preview_urls.txt', 'utf8')
              .split('\n')
              .filter(Boolean)
              .map(line => {
                const [app, url] = line.split('=');
                return `- **${app}**: ${url}`;
              })
              .join('\n');

            const body = `ðŸš€ Preview deployments are ready!\n\n${urls}\n\nThese previews will expire in 7 days.`;

            // Remove any existing bot comments
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const botComments = comments.data.filter(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Preview deployments are ready!')
            );

            for (const comment of botComments) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id
              });
            }

            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
